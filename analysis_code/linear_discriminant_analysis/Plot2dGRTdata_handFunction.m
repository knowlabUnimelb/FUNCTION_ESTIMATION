clear allclc% close all% Load subject's data file% disp('...Loading a data file');% load subjdemo_2d.dat% data = subjdemo_2d;% Load subject's data filedata = dlmread('handParms.dat');% Massage raw data formatwhichSets = [2 3; 2 4; 3 4];sp = [0.39187     -0.9533       0.30203      -0.69524;      0.46238     -0.93513      0.35431       0.9065;      0.66029     -0.81491      0.57959       2.5556];  figure  for i = 2%1:size(whichSets, 1)      whichSet = whichSets(i,:);      axisSets = [-4 4; -4 4; -7 0];      labs = {'log Length Scale', 'log Signal Var', 'log Noise Var'};            data1 = data(data(:,1) ~= 2,:); % Remove quadratic parms      data1(data1(:,1)==4,1) = 2;     % Recode similarity to 2      data1(:,[2 3]) = data1(:,whichSet);    % Keep current set      data1(:,4) = ones(size(data1,1),1);            % Specify optimal boundary, subject's boundary      % any other boundaries, and xyz axis limits.      raw_params = sp(i,:); %[   10       0.5145     -0.85749  -0.00015389] + rand(1,4);      start_params = norm_old_2dparams(raw_params);      fprintf('...Searching for best fit\n');      [final_params neglikelihood] = fit_2dGLC(start_params,data1,7);            subjlinbnd(i,:) = [ final_params(2:end)];            % optbnd = [.6 -1 0];      % subjlinbnd = [0.4441   -0.8960   11.5237];      % subjquadbnd = [0.0003    0.0041   -0.0005    0.4099   -1.7901   65.4630];      % optxbnd = [1.0000 0.0000 -200.0000];      % optybnd = [0.0000 1.0000 -120.0000];      xyaxes = [axisSets(whichSet(1)-1,:), axisSets(whichSet(2)-1,:)];            % Plot stimuli, optimal bound and other interesting bounds      subplot(2,2,i)      plot2dstim(data1,xyaxes,0);            hold on;      plot(data(data(:,1) == 2, whichSet(1)), data(data(:,1) == 2, whichSet(2)), ' xr')            legend('Linear Functions', 'Similarity Functions', 'Quadratic Functions')      plot2dlinbnd(subjlinbnd(i,:),'r-',xyaxes);      xlabel(labs{whichSet(1)-1});      ylabel(labs{whichSet(2)-1});      grid on;            % Compute predictions of discriminate boundary      predictions(:,i) = double(lindiscrim2dvals(data1(:,2:3), subjlinbnd(i,:)) < 0);      predictions(lindiscrim2dvals(data1(:,2:3), subjlinbnd(i,:)) >= 0,i) = 2;       accuracy(i) = percorr([data1(:,1:3), predictions(:,i)], 2);  end